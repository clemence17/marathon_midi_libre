geom_point(alpha = 1/10)
dgoog %>%
pivot_longer(High) %>%
ggplot(aes(x = High, y = Da, colour = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
dgoog %>% ACF(Close) %>% autoplot()
dgoog %>% ACF(difference(Close)) %>% autoplot()
fb %>% ACF(High) %>% autoplot()
fb %>% ACF(Low) %>% autoplot()
fb %>% ACF(close) %>% autoplot()
#train
fit <- gdppc %>%
model(trend_model = TSLM(GDP_per_capita ~ trend()))
fit %>% gg_tsresiduals()
#train
ft <- gdppc %>%
model(trend_model = TSLM(GDP_per_capita ~ trend()))
ft %>% gg_tsresiduals()
fit <- dgoog_mod %>%
model(RW(Close ~ drift()))
fit %>% gg_tsresiduals()
autoplot(myseries, Turnover) +
autolayer(myseries_train, Turnover, colour = "red")
autoplot(dgoog_mod, Close) +
autolayer(fit, Close, colour = "red")
fc <- fit %>%
forecast(new_data = anti_join(dgoog_mod, fit))
fc <- fit %>%
forecast(dgoog_mod = anti_join(dgoog_mod, fit))
install.packages("Quandl")
global_economy %>%
filter(Code == "EGY") %>%
autoplot(Exports) +
labs(y = "% of GDP", title = "Egyptian exports")
library(fpp3)
library(tsibble)
library(dplyr)
library(lubridate)
global_economy %>%
filter(Code == "EGY") %>%
autoplot(Exports) +
labs(y = "% of GDP", title = "Egyptian exports")
report(fit)
# modèle ARIMA pour ses données
fit <- global_economy %>%
filter(Code == "EGY") %>%
model(ARIMA(Exports))
report(fit)
fit %>% forecast(h=10) %>%
autoplot(global_economy) +
labs(y = "% of GDP", title = "Egyptian exports")
# ACF pour ce modèle
global_economy %>%
filter(Code == "EGY") %>%
ACF(Exports) %>%
autoplot()
global_economy %>%
filter(Code == "EGY") %>%
PACF(Exports) %>%
autoplot()
# PACF
global_economy %>%
filter(Code == "EGY") %>%
PACF(Exports) %>%
autoplot()
# choisir son arima
fit2 <- global_economy %>%
filter(Code == "EGY") %>%
model(ARIMA(Exports ~ pdq(4,0,0)))
report(fit2)
report(fit)
#Box Cox avec un pays
lambda <- global_economy %>%
filter(!is.na(GDP)) %>%
filter(Country =="Afghanistan") %>%
features(GDP, features = guerrero) %>%
pull(lambda_guerrero)
global_economy %>%
filter(!is.na(GDP)) %>%
filter(Country =="Afghanistan") %>%
autoplot(box_cox(GDP, lambda)) +
labs(y = "",
title = latex2exp::TeX(paste0(
"Transformed gas production with $\lambda$ = ",
round(lambda,2))))
#Box Cox avec un pays
lambda <- global_economy %>%
filter(!is.na(GDP)) %>%
filter(Country =="Afghanistan") %>%
features(GDP, features = guerrero) %>%
pull(lambda_guerrero)
global_economy %>%
filter(!is.na(GDP)) %>%
filter(Country =="Afghanistan") %>%
autoplot(box_cox(GDP, lambda)) +
labs(y = "",
title = latex2exp::TeX(paste0(
"Transformed gas production with $\lambda$ = ",
round(lambda,2))))
global_economy %>%
filter(!is.na(GDP)) %>%
filter(Country =="Afghanistan") %>%
autoplot(box_cox(GDP, lambda)) +
labs(y = "",
title = latex2exp::TeX(paste0("Transformed gas production with $\lambda$ = ",round(lambda,2))))
library(latex2exp)
install.packages("latex2exp")
library(latex2exp)
install.packages("latex2exp")
install.packages("ggalt")
install.packages("GGally")
library(ggaly)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(fpp3)
library(tsibble)
library(dplyr)
library(lubridate)
covid=read.csv2("test_covid.csv")
covid
covid$index <- 1:nrow(covid)
covid<-covid %>%
as_tsibble(index = index)
covid %>%
count(jour)
covid %>%
count(P)
covid %>%
model(STL(P ~ season(window=9), robust=TRUE)) %>%
components() %>% autoplot() +
labs(title = "STL decomposition: nombre de positif")
covid %>%
model(STL(P ~ season(window=5))) %>%
components()
covid %>%
model(STL(P ~ trend(window=15) +
season(window="periodic"),
robust = TRUE)
) %>% components()
fit <- covid %>%
model(ARIMA(P))
fit %>% forecast(h=10) %>%
autoplot(covid) +
labs(y = "jour", title = "Positif du covid")
covid %>%
ACF(P) %>%
autoplot()
covid %>%
features(P, unitroot_kpss)
dgoog %>% ACF(difference(Close)) %>% autoplot()
covid %>% ACF(difference(P)) %>% autoplot()
covid %>%
PACF(P) %>%
autoplot()
fit2 <- covid %>%
model(ARIMA(P ~ pdq(11,0,0)))
report(fit2)
covid=read.csv2("test_covid.csv")
covid$index <- 1:nrow(covid)
covid<-covid %>%
as_tsibble(index = index)
shiny::runApp('test')
shiny::runApp('marathon WEB/marathon')
runApp('marathon WEB/marathon')
library(rfactor)
library(ggbiplot)
df <- readr::read_csv("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.csv")
df
df
df
df <- readr::read_csv("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.csv")
df <- readr::read_xls("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
df <- readr::read_xlsx("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
df <- readr::read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
library("readxl")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
library(ggbiplot)
install.packages("ggbiplot")
library(ggbiplot)
res.pca <- PCA(df, graph = FALSE)
library("FactoMineR")
install.packages("FactoMineR")
library("FactoMineR")
res.pca <- PCA(df, graph = FALSE)
library("FactoMineR")
install.packages("FactoMineR")
install.packages("data.table")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("FactoMineR")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
library("readxl")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
shiny::runApp('marathon WEB/test')
runApp('marathon WEB/test')
runApp('marathon WEB/test')
runApp('marathon WEB/histo')
library("readxl")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
macron <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
lepen <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/lepen.xls")
df=rbind(macron, lepen)
#df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
macron <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
#df=rbind(macron, lepen)
df=macron
#df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
macron <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
#df=rbind(macron, lepen)
df=macron
#df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/Presidentielle_2017_Departement_Tour_2.xls")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
df$column <- unlist(df$column)
df <- unlist(df)
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
df.columns <- unlist(df.columns)
df.columns
df$columns <- unlist(df$columns)
df
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3]))
df[,1]
df[,2]
df[,3]
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3]))
df=as.data.frame(df)
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3]))
ggplot(data = df, aes(x = df[,1], y = df[,2], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
ggplot(data = df) + geom_bar(aes(x = df[,1], y = df[,2], fill=df[,3]),position="dodge") + ggtitle('histo')
ggplot(data = df) + geom_bar(aes(x = df[,1], y = df[,2], fill=df[,3]),position="dodge")
ggplot(data = df, aes(df[,2], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
ggplot(data = df, aes(df[,1], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
ggplot(df, aes(x = x, fill = candidat)) +
geom_histogram()
ggplot(df, aes(x = region, fill = candidat)) +
geom_histogram()
ggplot(df, aes(x = vote, fill = candidat)) +
geom_histogram()
ggplot(df, aes(x = vote, fill = region)) +
geom_histogram()
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/occitanie.xls")
df=as.data.frame(df)
ggplot(df, aes(x = vote, fill = candidat)) +
geom_histogram()
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/macron.xls")
ggplot(data = df, aes(df[,1], fill=df[,3])) + geom_bar(position="stack") + ggtitle('histo')
df$columns <- unlist(df$columns)
df=as.data.frame(df)
ggplot(data = df, aes(df[,1], fill=df[,3])) + geom_bar(position="stack") + ggtitle('histo')
ggplot(data = df, aes(df[,1], fill=df[,3])) + geom_bar(position="dodge") + ggtitle('histo')
?geom_bar
ggplot(data = df, aes(df[,1], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
runApp('marathon WEB/histo')
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/ville_tou2.xls")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/villes_tou2.xls")
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/villes_2.xls")
df=as.data.frame(df)
ggplot(df, aes(x = vote, fill = candidat)) +
geom_histogram()
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/villes_2.xls")
df=as.data.frame(df)
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
runApp('marathon WEB/histo')
runApp()
runApp('marathon WEB/histo')
runApp()
runApp()
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,1])
library(gganimate)
install.packages("gganimate")
library(gganimate)
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,1])
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,2])
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,2])+geom_bar_interactive(aes(x=df[,1],
tooltip=paste(Value,"décès pour 100 000 naissances")))
install.packages("geom_bar_interactive")
install.packages("ggiraph")
library(ggiraph)
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,2])+geom_bar_interactive(aes(x=df[,1],
tooltip=paste(Value,"décès pour 100 000 naissances")))
library(rfactor)
library(ggbiplot)
library("readxl")
library("FactoMineR")
library(tidyverse)
library(ggplot2)
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ transition_reveal(df[,2])+geom_bar_interactive(aes(x=df[,1],
tooltip=paste(Value,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],tooltip=paste(Value,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],tooltip=paste(vote,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=ville))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=ville,y=vote,tooltip = paste(ville, "\n",vote,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],y=df[,2],tooltip = paste(ville, "\n",vote,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],tooltip = paste(ville, "\n",vote,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_point_interactive(aes(x=df[,1],y=df[,2],tooltip = paste(ville, "\n",vote,"décès pour 100 000 naissances")))
ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
?geom_bar_interactive
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_point_interactive(aes(tooltip = candidat), size = 2)
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive(aes(tooltip = candidat), size = 2)
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
g_bar <- ggplot(df,
aes(x = df[,2],
tooltip = ville,
fill = candidat,
data_id = candidat)) +
geom_bar_interactive()
ggiraph(code = print(g_bar))
g_bar <- ggplot(df,
aes(x = df[,1],
tooltip = ville,
fill = candidat,
data_id = candidat)) +
geom_bar_interactive()
ggiraph(code = print(g_bar))
g_bar <- ggplot(df,
aes(x = df[,1],
tooltip = ville,
fill = candidat,
data_id = candidat)) +
geom_col(position="dodge")+
geom_bar_interactive()
ggiraph(code = print(g_bar))
g_bar <- ggplot(df,
aes(x = df[,1],
y=df[,2]
tooltip = ville,
fill = candidat,
data_id = candidat)) +
geom_col(position="dodge")+
geom_bar_interactive()
tooltip = ville,
fill = candidat,
data_id = candidat)) + geom_col(position="dodge")+
geom_bar_interactive()
ggiraph(code = print(g_bar))
g_bar <- ggplot(df,
aes(x = df[,1],
y=df[,2],
tooltip = ville,
fill = candidat,
data_id = candidat)) + geom_col(position="dodge")+
geom_bar_interactive()
ggiraph(code = print(g_bar))
library(ggmap)
# For google map, you have to give the center of the window you are looking at.
# Possibility for the map type argument: terrain / satellite / roadmap / hybrid
# get the map info
map <- get_googlemap("Montpellier, France", zoom = 8, maptype = "terrain")
# Plot it
ggmap(map) +
theme_void() +
ggtitle("terrain") +
theme(
plot.title = element_text(colour = "orange"),
panel.border = element_rect(colour = "grey", fill=NA, size=2)
)
install.packages("ggmap")
library(ggmap)
# For google map, you have to give the center of the window you are looking at.
# Possibility for the map type argument: terrain / satellite / roadmap / hybrid
# get the map info
map <- get_googlemap("Montpellier, France", zoom = 8, maptype = "terrain")
# Plot it
ggmap(map) +
theme_void() +
ggtitle("terrain") +
theme(
plot.title = element_text(colour = "orange"),
panel.border = element_rect(colour = "grey", fill=NA, size=2)
)
# get the map info
map <- get_googlemap("Montpellier, France", zoom = 8, maptype = "terrain")
?register_google
library(cartography)
# Load data
data(nuts2006)
# Build a choropleth
choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = "pop2008" , legend.pos = "right")
title("Population in 2008")
library(cartography)
library(cartography)
# Load data
data(nuts2006)
# Build a choropleth
choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = "pop2008" , legend.pos = "right")
title("Population in 2008")
nuts2006
?nuts2006
??nuts2006
# Load data
data(nuts2006)
force(nuts3.df)
force(nuts2.df)
force(nuts1.spdf)
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
library(rfactor)
library(ggbiplot)
library("readxl")
library("FactoMineR")
library(tidyverse)
library(ggplot2)
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
library(ggiraph)
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
ggplotly(my_gg)
library(ggplotly)
library(plotly)
library(plotly)
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
library(ggiraph)
my_gg=ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')+ geom_bar_interactive()
ggplotly(my_gg)
#+geom_bar_interactive(aes(x=df[,1],tooltip = paste(df[,1],"décès pour 100 000 naissances")))
ggiraph(code = print(my_gg))
g_bar <- ggplot(df,
aes(x = df[,1],
y=df[,2],
tooltip = ville,
fill = candidat,
data_id = candidat)) + geom_col(position="dodge")+
geom_bar_interactive()
ggiraph(code = print(g_bar))
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
p <- ggplot(data=dat1, aes(x=time, y=total_bill, fill=sex)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))
fig <- ggplotly(p)
fig
df <- read_excel("C:/Users/elmen/OneDrive/Documents/marathon/villes_2.xls")
df=as.data.frame(df)
p <- ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))
fig <- ggplotly(p)
fig
p <- ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07"))
fig <- ggplotly(p)
fig
shiny::runApp('marathon WEB/histo')
ggplotly(ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07")))
runApp('marathon WEB/histo')
ggplotly(ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07")))
#ggplot(data = df, aes(x=df[,1],y=df[,2], fill=df[,3])) + geom_col(position="dodge") + ggtitle('histo')
ggplotly(ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07")))
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
ggplotly(ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_stack(reverse = TRUE), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07")))
ggplotly(ggplot(data=df, aes(x=ville, y=vote, fill=candidat)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#00AFBB", "#FC4E07")))
g <- ggplot(df, aes(ville))
p <-ggplot(df, aes(y = ville)) +
geom_bar(aes(fill = candidat), position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
ggplotly(p)
p <-ggplot(df, aes(x=ville,y = ville)) +
geom_bar(stat="identity",aes(fill = candidat), position = position_stack(reverse = TRUE)) +
theme(legend.position = "top")
ggplotly(p)
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
runApp()
runApp('marathon WEB/histo')
runApp('marathon WEB/histo')
